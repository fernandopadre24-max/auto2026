{
  "entities": {
    "StoreConfig": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "StoreConfig",
      "type": "object",
      "description": "Represents the store's configuration settings.",
      "properties": {
        "storeName": {
          "type": "string",
          "description": "The name of the store."
        },
        "cnpj": {
          "type": "string",
          "description": "The CNPJ of the store."
        },
        "address": {
          "type": "string",
          "description": "The physical address of the store."
        },
        "phone": {
          "type": "string",
          "description": "The contact phone number for the store."
        }
      },
      "required": [
        "storeName"
      ]
    },
    "Product": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Product",
      "type": "object",
      "description": "Represents a clothing product in the inventory.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the product."
        },
        "name": {
          "type": "string",
          "description": "Name of the product."
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the product."
        },
        "purchasePrice": {
          "type": "number",
          "description": "The price at which the product was purchased."
        },
        "salePrice": {
          "type": "number",
          "description": "The price at which the product is sold."
        },
        "stock": {
          "type": "number",
          "description": "Current quantity of the product in inventory."
        },
        "supplierId": {
          "type": "string",
          "description": "Reference to the supplier of the product."
        },
        "category": {
          "type": "string",
          "description": "Category of the product (e.g., T-shirts, Jeans, Dresses)."
        },
        "size": {
          "type": "string",
          "description": "Size of the product (e.g., S, M, L, 40, 42)."
        },
        "color": {
          "type": "string",
          "description": "Color of the product."
        },
        "gender": {
          "type": "string",
          "description": "Target gender for the product (e.g., Masculino, Feminino, Unissex)."
        },
        "sku": {
          "type": "string",
          "description": "Stock Keeping Unit."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the product was added to the inventory.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp of when the product was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "purchasePrice",
        "salePrice",
        "stock",
        "category"
      ]
    },
    "Employee": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Employee",
      "type": "object",
      "description": "Represents an employee of the auto parts store.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the employee."
        },
        "employeeCode": {
          "type": "string",
          "description": "Unique, auto-generated code for the employee."
        },
        "firstName": {
          "type": "string",
          "description": "First name of the employee."
        },
        "lastName": {
          "type": "string",
          "description": "Last name of the employee."
        },
        "email": {
          "type": "string",
          "description": "Email address of the employee.",
          "format": "email"
        },
        "phoneNumber": {
          "type": "string",
          "description": "Phone number of the employee."
        },
        "address": {
          "type": "string",
          "description": "Address of the employee."
        },
        "cpf": {
          "type": "string",
          "description": "CPF of the employee."
        },
        "role": {
          "type": "string",
          "description": "Role of the employee (e.g., manager, sales representative)."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the employee was added.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp of when the employee was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "employeeCode",
        "firstName",
        "lastName",
        "email",
        "role"
      ]
    },
    "Customer": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Customer",
      "type": "object",
      "description": "Represents a customer of the auto parts store.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the customer."
        },
        "firstName": {
          "type": "string",
          "description": "First name of the customer."
        },
        "lastName": {
          "type": "string",
          "description": "Last name of the customer."
        },
        "email": {
          "type": "string",
          "description": "Email address of the customer.",
          "format": "email"
        },
        "phoneNumber": {
          "type": "string",
          "description": "Phone number of the customer."
        },
        "address": {
          "type": "string",
          "description": "Address of the customer."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the customer was added.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp of when the customer was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "firstName",
        "lastName",
        "email"
      ]
    },
    "Sale": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Sale",
      "type": "object",
      "description": "Represents a sale transaction.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the sale."
        },
        "customerId": {
          "type": "string",
          "description": "Reference to Customer. (Relationship: Customer 1:N Sale)"
        },
        "employeeId": {
          "type": "string",
          "description": "Reference to Employee. (Relationship: Employee 1:N Sale)"
        },
        "saleDate": {
          "type": "string",
          "description": "Date of the sale.",
          "format": "date-time"
        },
        "totalAmount": {
          "type": "number",
          "description": "Total amount of the sale."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the Sale was added.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp of when the Sale was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "customerId",
        "employeeId",
        "saleDate",
        "totalAmount"
      ]
    },
    "SaleItem": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SaleItem",
      "type": "object",
      "description": "Represents an item within a sale transaction.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the sale item."
        },
        "saleId": {
          "type": "string",
          "description": "Reference to Sale. (Relationship: Sale 1:N SaleItem)"
        },
        "productId": {
          "type": "string",
          "description": "Reference to Product. (Relationship: Product 1:N SaleItem)"
        },
        "quantity": {
          "type": "number",
          "description": "Quantity of the product sold in this sale item."
        },
        "unitPrice": {
          "type": "number",
          "description": "Price of a single unit of the product at the time of the sale."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the SaleItem was added.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp of when the SaleItem was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "saleId",
        "productId",
        "quantity",
        "unitPrice"
      ]
    },
    "Supplier": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Supplier",
      "type": "object",
      "description": "Represents a supplier of auto parts.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the supplier."
        },
        "name": {
          "type": "string",
          "description": "The official name of the supplier company."
        },
        "cnpj": {
          "type": "string",
          "description": "The CNPJ of the supplier."
        },
        "contactName": {
          "type": "string",
          "description": "The name of the primary contact person at the supplier."
        },
        "email": {
          "type": "string",
          "description": "Email address of the supplier.",
          "format": "email"
        },
        "phoneNumber": {
          "type": "string",
          "description": "Phone number of the supplier."
        },
        "address": {
          "type": "string",
          "description": "Address of the supplier."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the supplier was added.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp of when the supplier was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "email"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/storeConfig/main",
        "definition": {
          "entityName": "StoreConfig",
          "schema": {
            "$ref": "#/backend/entities/StoreConfig"
          },
          "description": "Stores the main configuration for the store."
        }
      },
      {
        "path": "/products/{productId}",
        "definition": {
          "entityName": "Product",
          "schema": {
            "$ref": "#/backend/entities/Product"
          },
          "description": "Stores product information.",
          "params": [
            {
              "name": "productId",
              "description": "The unique identifier for the product."
            }
          ]
        }
      },
      {
        "path": "/employees/{employeeId}",
        "definition": {
          "entityName": "Employee",
          "schema": {
            "$ref": "#/backend/entities/Employee"
          },
          "description": "Stores employee information.",
          "params": [
            {
              "name": "employeeId",
              "description": "The unique identifier for the employee."
            }
          ]
        }
      },
      {
        "path": "/customers/{customerId}",
        "definition": {
          "entityName": "Customer",
          "schema": {
            "$ref": "#/backend/entities/Customer"
          },
          "description": "Stores customer information.",
          "params": [
            {
              "name": "customerId",
              "description": "The unique identifier for the customer."
            }
          ]
        }
      },
      {
        "path": "/suppliers/{supplierId}",
        "definition": {
          "entityName": "Supplier",
          "schema": {
            "$ref": "#/backend/entities/Supplier"
          },
          "description": "Stores supplier information.",
          "params": [
            {
              "name": "supplierId",
              "description": "The unique identifier for the supplier."
            }
          ]
        }
      },
      {
        "path": "/sales/{saleId}",
        "definition": {
          "entityName": "Sale",
          "schema": {
            "$ref": "#/backend/entities/Sale"
          },
          "description": "Stores sale transaction information.  References customerId and employeeId.",
          "params": [
            {
              "name": "saleId",
              "description": "The unique identifier for the sale."
            }
          ]
        }
      },
      {
        "path": "/sales/{saleId}/saleItems/{saleItemId}",
        "definition": {
          "entityName": "SaleItem",
          "schema": {
            "$ref": "#/backend/entities/SaleItem"
          },
          "description": "Stores items within a sale transaction. References saleId and productId.",
          "params": [
            {
              "name": "saleId",
              "description": "The unique identifier for the sale."
            },
            {
              "name": "saleItemId",
              "description": "The unique identifier for the sale item."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore data structure is designed to efficiently store and manage data for the Fashion Store application. It focuses on clarity, scalability, and security, adhering to the principles of Authorization Independence and Structural Segregation.  Each entity (Product, Employee, Customer, Sale, SaleItem, and StoreConfig) has its own dedicated collection.  Path-based ownership is employed where applicable to simplify security rules.  \n\nStore configuration is stored in a singleton document `/storeConfig/main` for easy access.\n\nProducts are stored in a top-level `products` collection. Employees and Customers are similarly stored in `employees` and `customers` collections respectively.\n\nSales are organized under the `sales` collection. Each sale has a `customerId` and `employeeId` to link back to the respective entities. SaleItems are stored as subcollections under each `sale` document, ensuring data locality and efficient querying of items within a specific sale. Relationships are modeled via document references.\n\n**Authorization Independence:** No `get()` calls are required in security rules, as authorization depends solely on `request.auth.uid` and the roles of the authenticated user, which is managed separately. \n\n**QAPs (Rules are not Filters):** The structure facilitates secure list operations by segregating data based on entity type and relationships. This prevents the need for complex filtering in security rules and ensures that only authorized data is accessed."
  }
}

    